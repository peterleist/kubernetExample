

package hu.bme.mit.cps.k8slab.powercalculator;

/* PowerSubscriber.java

A publication of data of type Power

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type Power automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java PowerSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java PowerPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class PowerPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class PowerSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

import hu.bme.mit.cps.k8slab.Current;
import hu.bme.mit.cps.k8slab.CurrentDataReader;
import hu.bme.mit.cps.k8slab.CurrentSeq;
import hu.bme.mit.cps.k8slab.CurrentTypeSupport;
import hu.bme.mit.cps.k8slab.Database;
import hu.bme.mit.cps.k8slab.Power;
import hu.bme.mit.cps.k8slab.PowerDataReader;
import hu.bme.mit.cps.k8slab.PowerSeq;
import hu.bme.mit.cps.k8slab.PowerTypeSupport;
import hu.bme.mit.cps.k8slab.Voltage;
import hu.bme.mit.cps.k8slab.VoltageDataReader;
import hu.bme.mit.cps.k8slab.VoltageSeq;
import hu.bme.mit.cps.k8slab.VoltageTypeSupport;

// ===========================================================================

public class PowerCalculator {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    private static Voltage voltage = null;
    private static Current current = null;
    
    
    private static void initData() {
    	voltage = null;
    	current = null;
    }
    
    private static void printData() {
		System.out.print("Voltage " + voltage.toString() + "\nCurrent " + current.toString());
	}
    
    private static Power validate() {
    	Power power = null;
    	if (voltage != null && current != null) {
    		printData();
			if (((voltage.TimeStamp/1000)-(current.TimeStamp/1000)) <= 30) {
				power = new Power();
				power.PValue = voltage.UValue*current.IValue;
				power.TimeStamp = Math.max(voltage.TimeStamp, current.TimeStamp);
				
			}
		}
    	
    	return power;
    }
    
    // --- Constructors: -----------------------------------------------------

    private PowerCalculator() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic currentTopic = null;
        Topic voltageTopic = null;
        VoltageListener voltageListener = null;
        CurrentListener currentListener = null;
        CurrentDataReader currentReader = null;
        VoltageDataReader voltageReader = null;
        Database db = new Database();
        
        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic --- //

            /* Register type before creating topic */
            String voltageTypeName = VoltageTypeSupport.get_type_name(); 
            VoltageTypeSupport.register_type(participant, voltageTypeName);
            String currentTypeName = CurrentTypeSupport.get_type_name(); 
            CurrentTypeSupport.register_type(participant, currentTypeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            voltageTopic = participant.create_topic(
                "VoltageTopic",
                voltageTypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (voltageTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            currentTopic = participant.create_topic(
                "CurrentTopic",
                currentTypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (currentTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            // --- Create reader --- //

            voltageListener = new VoltageListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            voltageReader = (VoltageDataReader)
            subscriber.create_datareader(
                voltageTopic, Subscriber.DATAREADER_QOS_DEFAULT, voltageListener,
                StatusKind.STATUS_MASK_ALL);
            if (voltageReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }   
            
            currentListener = new CurrentListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            currentReader = (CurrentDataReader)
            subscriber.create_datareader(
                currentTopic, Subscriber.DATAREADER_QOS_DEFAULT, currentListener,
                StatusKind.STATUS_MASK_ALL);
            if (currentReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }  

            // --- Wait for data --- //

            final long receivePeriodSec = 4;
            Power instance = null;
            
            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
                System.out.println("Power subscriber sleeping for "
                + receivePeriodSec + " sec...");

            	instance = validate(); 
            	if (instance != null) {
					System.out.println("Valid Power" + instance.toString());
					db.addData(instance.TimeStamp, instance.PValue);
				}
            	
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class VoltageListener extends DataReaderAdapter {

        VoltageSeq _dataSeq = new VoltageSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            VoltageDataReader voltageReader =
            (VoltageDataReader)reader;

            try {
                voltageReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        Voltage instance = _dataSeq.get(i);
                        if (instance.USensorID > 999) {
							voltage = instance;
						}
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                voltageReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
    private static class CurrentListener extends DataReaderAdapter {

        CurrentSeq _dataSeq = new CurrentSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            CurrentDataReader currentReader =
            (CurrentDataReader)reader;

            try {
                currentReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                    	Current instance = _dataSeq.get(i);
                    	if (instance.ISensorID > 999) {
							current = instance;
						}
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                currentReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}

